# TODO: Use VCPKG_INSTALLATION_ROOT and PROGRAMFILES
# TODO: Use binary caching https://devblogs.microsoft.com/cppblog/vcpkg-accelerate-your-team-development-environment-with-binary-caching-and-manifests/
name: Build and Test

on:
  push:

jobs:
  build-and-test:
    runs-on: windows-latest
    env:
      # Needed by vcpkg to find the binary cache and
      # restore dependencies like Boost faster.
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
    steps:
      # Rebuilding all vcpkg dependencies at each commit is time consuming,
      # in particular when Boost is a dependency. So cache binaries.
      # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1.6.3

      # Needed for MSYS and vcpkg as well as for the Clang build.
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
          
      - name: Install OpenCppCoverage
        run: |
          $url = "https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe"
          $output = "OpenCppCoverageSetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process msiexec -ArgumentList "/package $output /quiet /norestart" -Wait
          
      - name: Install cppcheck
        run: |
          $url = "https://github.com/danmar/cppcheck/releases/download/2.17.1/cppcheck-2.17.1-x64-Setup.msi"
          $output = "cppcheck.msi"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait  

      #- name: Install MSYS2
      #  uses: msys2/setup-msys2@v2
      #  with:
      #    msystem: UCRT64
      #    update: true
      #    # path-type: inherit
      #    install: >-
      #      make
      #    pacboy: >-
      #      toolchain:p
      #      cmake:p
      #      ninja:p

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      #- name: Debug Environment
      #  shell: msys2 {0}
      #  run: |
      #    echo "$PATH"
      #    ls /ucrt64/bin
      #    ls /usr/bin
      #    which make.exe
      #    which ar.exe
      #    which ninja.exe
      #    make.exe --version
      #    ar.exe --version

      #- name: Build (GCC)
      #  shell: msys2 {0}
      #  env:
      #    CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      #    LLVM_PATH: C:/Program Files/LLVM/bin/
      #    MSYS2_PATH_TYPE: inherit
      #  run: |
      #    cmake --workflow x64-Debug-GCC

      - name: Build (MSVC)
        uses: lukka/run-cmake@v10
        env:
          CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          LLVM_PATH: C:/Program Files/LLVM/bin/
        with:
          workflowPreset: x64-Debug-MSVC

      - name: Build (Clang)
        uses: lukka/run-cmake@v10
        env:
          CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          LLVM_PATH: C:/Program Files/LLVM/bin/
        with:
          workflowPreset: x64-Debug-Clang

      - name: Run unit tests
        run: >
          Start-Process "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe"
          -Wait
          -ArgumentList
          "--working_dir `"${{ github.workspace }}/out/x64-Debug-MSVC`"
          --export_type `\cobertura:${{ github.workspace }}/out/x64-Debug-MSVC/raw_coverage.xml`"
          --cover_children
          --sources `"${{ github.workspace }}`"
          -- ctest -j --verbose -T Test --output-junit ${{ github.workspace }}/out/x64-Debug-MSVC/test_results.xml"

      - name: Dump coverage
        run: >
          Out-File ${{ github.workspace }}/out/x64-Debug-MSVC/raw_coverage.xml

      - name: Dump test result
        run: >
          Out-File ${{ github.workspace }}/out/x64-Debug-MSVC/test_results.xml

      - name: Analyze (cppcheck)
        run: >
          cppcheck.exe
          --template="{`"engineId`":`"cppcheck`",`"ruleId`":`"{id}`",`"type`":`"CODE_SMELL`",`"severity`":`"{severity}`",`"primaryLocation`":{`"message`":`"{message}`",`"filePath`":`"{file}`",`"testRange`":{`"startLine`":{line},`"startColumn`":{column}}}}"
          --project="${{ github.workspace }}/out/x64-Debug-Clang/compile_commands.json"
          --project-configuration=Debug|x64
          --library=boost.cfg
          --output-file=out/x64-Debug-Clang/cppcheck.json
          -D__cppcheck__

      # TODO: Filter severity
      - name: Create SonarCloud issue report (cppcheck)
        run: |
          $file = "${{ github.workspace }}/out/x64-Debug-Clang/cppcheck.json"
          "{`"issues`":[" + (Get-Content $file) + "]}" | Set-Content $file

      - name: Dump cppcheck results
        run: >
          Out-File ${{ github.workspace }}/out/x64-Debug-Clang/cppcheck.json

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
