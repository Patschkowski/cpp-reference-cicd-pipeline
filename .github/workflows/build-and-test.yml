# TODO: Use VCPKG_INSTALLATION_ROOT and PROGRAMFILES
# TODO: Use Infer
# TODO: Use behave for system-level testing
# TODO: Use GCC
# TODO: Fix test results parsing
# TODO: Create commit-hook for auto-formatting
name: Build and Test

on:
  push:

jobs:
  build-and-test:
    runs-on: windows-latest
    env:
      # Needed by vcpkg to find the binary cache and
      # restore dependencies like Boost faster.
      VCPKG_BINARY_SOURCES: clear;x-gha,readwrite
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Rebuilding all vcpkg dependencies at each commit is time consuming,
      # in particular when Boost is a dependency. So cache binaries.
      # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1.6.3

      # Needed for MSYS and vcpkg as well as for the Clang build.
      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
          
      - name: Install OpenCppCoverage
        run: |
          $url = "https://github.com/OpenCppCoverage/OpenCppCoverage/releases/download/release-0.9.9.0/OpenCppCoverageSetup-x64-0.9.9.0.exe"
          $output = "OpenCppCoverageSetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process `
            -FilePath $output `
            -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" `
            -NoNewWindow `
            -Wait
          Start-Process `
            -FilePath "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" `
            -ArgumentList "--help" `
            -NoNewWindow `
            -Wait
          
      - name: Install cppcheck
        run: |
          $url = "https://github.com/danmar/cppcheck/releases/download/2.17.1/cppcheck-2.17.1-x64-Setup.msi"
          $output = "cppcheck.msi"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process `
            -FilePath msiexec `
            -ArgumentList "/package $output /quiet /norestart" `
            -NoNewWindow `
            -Wait
          Start-Process `
            -FilePath "C:\Program Files\Cppcheck\cppcheck.exe" `
            -ArgumentList "--version" `
            -NoNewWindow `
            -Wait

      - name: Install behave
        run: |
          pip install behave
          behave --version

      #- name: Install MSYS2
      #  uses: msys2/setup-msys2@v2
      #  with:
      #    msystem: UCRT64
      #    update: true
      #    # path-type: inherit
      #    install: >-
      #      make
      #    pacboy: >-
      #      toolchain:p
      #      cmake:p
      #      ninja:p

      #- name: Debug Environment
      #  shell: msys2 {0}
      #  run: |
      #    echo "$PATH"
      #    ls /ucrt64/bin
      #    ls /usr/bin
      #    which make.exe
      #    which ar.exe
      #    which ninja.exe
      #    make.exe --version
      #    ar.exe --version

      #- name: Build (GCC)
      #  shell: msys2 {0}
      #  env:
      #    CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      #    LLVM_PATH: C:/Program Files/LLVM/bin/
      #    MSYS2_PATH_TYPE: inherit
      #  run: |
      #    cmake --workflow x64-Debug-GCC

      - name: Build (MSVC)
        uses: lukka/run-cmake@v10
        env:
          CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          LLVM_PATH: C:/Program Files/LLVM/bin/
        with:
          workflowPreset: x64-Debug-MSVC

      - name: Build (Clang)
        uses: lukka/run-cmake@v10
        env:
          CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          LLVM_PATH: C:/Program Files/LLVM/bin/
        with:
          workflowPreset: x64-Debug-Clang

      - name: Run unit tests
        run: |
          $dir = "${{ github.workspace }}\out\x64-Debug-MSVC"
          New-Item -Path "$dir" -Name "test" -ItemType Directory
          Start-Process `
            -FilePath "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" `
            -ArgumentList `
              "--working_dir", "`"$dir`"", `
              "--export_type", "`"cobertura:$dir\unit_test_coverage.xml`"", `
              "--cover_children", `
              "--sources", "`"${{ github.workspace }}`"", `
              "--excluded_sources", "`"$dir\vcpkg_installed\*`"", `
              "--", `
              "ctest", `
              "-j", `
              "--verbose", `
              "-T", "Test" `
            -NoNewWindow `
            -Wait

      - name: Run system tests
        run: |
          $dir "${{ github.workspace }}\out\x64-Debug-MSVC"
          Start-Process `
            -FilePath "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" `
            -ArgumentList `
              "--working_dir", "`"${{ github.workspace }}\tests`"", `
              "--export_type", "`"cobertura:$dir\system_test_coverage.xml`"", `
              "--cover_children", `
              "--sources", "`"${{ github.workspace }}`"", `
              "--excluded_sources", "`"$dir\vcpkg_installed\*`"", `
              "--", `
              "behave" `
            -NoNewWindow
            -Wait

      - name: Dump test result
        run: |
          Get-ChildItem -recurse "${{ github.workspace }}/out/x64-Debug-MSVC/Testing" | Get-Content
          Get-ChildItem "${{ github.workspace }}/out/TESTS-hello.xml" | Get-Content

      # Run the cppcheck analysis and create an output file that is partially
      # compatible with the SonarCloud generic issue format.
      - name: Analyze (cppcheck)
        run: |
          $dir = "${{ github.workspace }}/out/x64-Debug-Clang"
          $template = "{`"engineId`":`"cppcheck`", `
                         `"ruleId`":`"{id}`", `
                         `"type`":`"CODE_SMELL`", `
                         `"severity`":`"{severity}`", `
                         `"primaryLocation`":{ `
                           `"message`":`"{message}`", `
                           `"filePath`":`"{file}`", `
                           `"testRange`":{ `
                             `"startLine`":{line}, `
                             `"startColumn`":{column} `
                           } `
                         } `
                        }"
          Start-Process `
            -FilePath "C:\Program Files\Cppcheck\cppcheck.exe" `
            -ArgumentList `
              "--template=`"$template`"", `
              "--project=`"$dir/compile_commands.json`"", `
              "--project-configuration=Debug|x64", `
              "--library=boost.cfg", `
              "--output-file=`"$dir/cppcheck.json`"", `
              "-D__cppcheck__" `
            -NoNewWindow `
            -Wait

      # Make the cppcheck output compliant with SonarCloud by adding the outer JSON
      # object and converting the severities.
      - name: Create SonarCloud issue report (cppcheck)
        run: |
          $file = "${{ github.workspace }}/out/x64-Debug-Clang/cppcheck.json"
          "{`"issues`":[" +
            ((Get-Content $file) `
              -replace ":`"error`"",":`"BLOCKER`"" `
              -replace ":`"warning`"",":`"BLOCKER`"" `
              -replace ":`"style`"",":`"MINOR`"" `
              -replace ":`"performance`"",":`"CRITICAL`"" `
              -replace ":`"portability`"",":`"MAJOR`"" `
              -replace ":`"information`"",":`"INFO`"") +
          "]}" | Set-Content $file

      - name: Dump cppcheck results
        run: >
          Get-Content ${{ github.workspace }}/out/x64-Debug-Clang/cppcheck.json

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
